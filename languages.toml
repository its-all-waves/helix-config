### C
[[language]]
name = "c"
indent = { tab-width = 4, unit = "    " }


### Go
[[language]]
name = "go"
auto-format = true
formatter = { command = "goimports" }

[language-server.gopls]
command = "gopls"

[language-server.gopls.config.hints]
assignVariableTypes = true
compositeLiteralFields = true
constantValues = true
functionTypeParameters = true
parameterNames = true
rangeVariableTypes = true

[language-server.golangci-lint-lsp]
command = "golangci-lint-langserver"

[language-server.golangci-lint-lsp.config]
command = [
  "golangci-lint",
  "run",
  "--out-format",
  "json",
  "--issues-exit-code=1",
]


# Markdown

[[language]]
name = "markdown"
formatter = { command = "prettier", args = ["--parser", "markdown"] }
indent = { tab-width = 4, unit = "    " }


### Web

# https://github.com/olrtg/emmet-language-server?tab=readme-ov-file#helix
[language-server.emmet-lsp]
command = "emmet-language-server"
args = ["--stdio"]

[language-server.deno-lsp]
command = "deno"
args = ["lsp"]
config.deno.enable = true

[[language]]
name = "typescript"
roots = ["deno.json", "deno.jsonc", "package.json"]
formatter = { command = "prettier", args = ["--parser", "typescript"] }
# language-servers = ["typescript-language-server"]
### Deno settings
language-servers = ["deno-lsp"]
auto-format = true

[[language]]
name = "tsx"
formatter = { command = "prettier", args = ["--parser", "typescript"] }
language-servers = ["typescript-language-server", "emmet-lsp"]
auto-format = true

[[language]]
name = "javascript"
# roots = ["deno.json", "deno.jsonc", "package.json"]
# formatter = { command = "prettier", args = ["--parser", "javascript"] }
auto-format = false
# language-servers = ["typescript-language-server", "deno-lsp"]
language-servers = ["typescript-language-server"]

[[language]]
name = "json"
auto-format = false

[[language]]
name = "jsx"
formatter = { command = "prettier", args = ["--parser", "javascript"] }
language-servers = ["typescript-language-server", "emmet-lsp"]

[[language]]
name = "css"
# formatter = { command = "prettier", args = ["--parser", "css"] }
auto-format = false

[[language]]
name = "html"
# roots = [".git"]
# formatter = { command = "prettier", args = ["--parser", "html"] }
language-servers = ["vscode-html-language-server", "emmet-lsp"]
auto-format = false


# Python

[[language]]
name = "python"
language-servers = ["pyright", "ruff"]
roots = [
  ".venv",
  "venv",
  "ENV",
  "env",
  ".git",
  "setup.py",
  "pyproject.toml",
  "uv.lock",
  "poetry.lock",
]

[language-server.ruff.config.settings]
lineLength = 80
logLevel = "debug"

[language-server.ruff.config.settings.lint]
# https://docs.astral.sh/ruff/rules/
select = [
  "A",      # flake8 builtins (warning on shadowed built-ins)
  "E",      # pycodestyle Error
  "F",      # pyflakes (unused imports & vars, etc)
  "W",      # Warning (tab indentation, trailing whitespace, etc) 
  "DOC",    # pydoclint (warning on malformed docstring)
  # "D",    # pydocstyle [ANNOYING] (undoc'd public method, overindented section, etc)
  "B",      # flake8 bugbear (useless expression, ABC w/o abstract method, etc)
  "I",      # isort (import sorting, missing required input)
  "RUF",    # ruff-specific
  "N",      # pep8 naming (symbol naming style)
  "LOG",    # flake8 logging
  "ERA",    # eradicate (warning on commented out code)
  "UP",     # pyupgrade (warning on older syntax)
  "ANN",    # flake8 annotations (warning on missing type annotations)
  "ASYNC",  # flake8 async (warning on bad async code)
  "S",      # flake8 bandit (security, debug=true, suspicious marshal usage, etc)
  "RET",    # flake8 return (bad returns)
  "TC",     # flake8 type checking
  "ARG",    # flake8 unused arguments
  "PTH",    # flake use pathlib (warn to use pathlib instead of xyz)
]

# Per Ruff, these settings will be ignored if there's a pyproject.toml
# (even with no tool.ruff settings declared)
[language-server.ruff.config.settings.format]
quote-style = "double"
docstring-code-format = true
indent-style = "space"
